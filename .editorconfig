# Rules in this file were initially inferred by Visual Studio IntelliCode from the C:\Projects\tzergity\ codebase based on best match to current usage at 18.03.2020
# You can modify the rules from these initially generated values to suit your own policies
# You can learn more about editorconfig here: https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference
[*.{cs,vb}]

#Core editorconfig formatting - indentation

#use soft tabs (spaces) for indentation
indent_style = space

#Formatting - indentation options

#indent switch case contents.
csharp_indent_case_contents = true
csharp_indent_case_contents_when_block = false
#labels are placed at the same indent as the current context
csharp_indent_labels = no_change
#indent switch labels
csharp_indent_switch_labels = true

#Formatting - new line options

#require braces to be on a new line for methods and types (also known as "Allman" style)
csharp_new_line_before_open_brace = all

#Formatting - organize using options

#sort System.* using directives alphabetically, and place them before other usings
dotnet_sort_system_directives_first = true

#Formatting - spacing options

#require NO space between a cast and the value
csharp_space_after_cast = false
#require a space before the colon for bases or interfaces in a type declaration
csharp_space_after_colon_in_inheritance_clause = true
#require a space after a keyword in a control flow statement such as a for loop
csharp_space_after_keywords_in_control_flow_statements = true
#require a space before the colon for bases or interfaces in a type declaration
csharp_space_before_colon_in_inheritance_clause = true
#remove space within empty argument list parentheses
csharp_space_between_method_call_empty_parameter_list_parentheses = false
#remove space between method call name and opening parenthesis
csharp_space_between_method_call_name_and_opening_parenthesis = false
#do not place space characters after the opening parenthesis and before the closing parenthesis of a method call
csharp_space_between_method_call_parameter_list_parentheses = false
#remove space within empty parameter list parentheses for a method declaration
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
#place a space character after the opening parenthesis and before the closing parenthesis of a method declaration parameter list.
csharp_space_between_method_declaration_parameter_list_parentheses = false

#Formatting - wrapping options

#leave code block on single line
csharp_preserve_single_line_blocks = true
#leave statements and member declarations on the same line
csharp_preserve_single_line_statements = true

#Style - expression bodied member options

# In the team, some delevopers prefer expressions while other ones prefer block bodies. 
# In order not to annoy anyone, it was decided to silence the disputable IDE warnings and suggestions
csharp_style_expression_bodied_constructors = false:error
csharp_style_expression_bodied_accessors    = when_on_single_line:silent
csharp_style_expression_bodied_indexers     = when_on_single_line:silent
csharp_style_expression_bodied_methods      = when_on_single_line:silent
csharp_style_expression_bodied_properties   = when_on_single_line:silent

#Style - expression level options

#prefer out variables to be declared before the method call
csharp_style_inlined_variable_declaration = false:suggestion
#prefer tuple names to ItemX properties
dotnet_style_explicit_tuple_names = true:suggestion
#prefer the language keyword for member access expressions, instead of the type name, for types that have a keyword to represent them
dotnet_style_predefined_type_for_member_access = true:suggestion

#Style - implicit and explicit types

#prefer explicit type over var to declare variables with built-in system types such as int
csharp_style_var_for_built_in_types = false:error
#prefer explicit type over var when the type is already mentioned on the right-hand side of a declaration
csharp_style_var_when_type_is_apparent = true:silent
csharp_style_var_elsewhere = false:error

#Style - language keyword and framework type options

#prefer the language keyword for local variables, method parameters, and class members, instead of the type name, for types that have a keyword to represent them
dotnet_style_predefined_type_for_locals_parameters_members = true:suggestion

#Style - qualification options

#prefer events not to be prefaced with this. or Me. in Visual Basic
dotnet_style_qualification_for_event = false:error
#prefer fields not to be prefaced with this. or Me. in Visual Basic
dotnet_style_qualification_for_field = false:error
#prefer methods not to be prefaced with this. or Me. in Visual Basic
dotnet_style_qualification_for_method = false:error
#prefer properties not to be prefaced with this. or Me. in Visual Basic
dotnet_style_qualification_for_property = false:error

#unused usings
dotnet_diagnostic.IDE0005.severity = error

#indentation
dotnet_diagnostic.IDE0055.severity = error

# Remove 'this.' when it's unnecessary
dotnet_diagnostic.IDE0003.severity = error

# Unused method parameters
dotnet_code_quality_unused_parameters = all
dotnet_diagnostic.IDE0060.severity = error

# CS0108: Member hides inherited member; missing new keyword
dotnet_diagnostic.CS0108.severity = error

# IDE0054: Use compound assignment
dotnet_style_prefer_compound_assignment = false

# IDE0090: Use 'new(...)'
csharp_style_implicit_object_creation_when_type_is_apparent = false

# IDE0066: Convert switch statement to expression
csharp_style_prefer_switch_expression = false

# IDE0047: Remove unnecessary parentheses
dotnet_diagnostic.IDE0047.severity = none
dotnet_style_parentheses_in_arithmetic_binary_operators = never_if_unnecessary
dotnet_style_parentheses_in_relational_binary_operators = never_if_unnecessary
dotnet_style_parentheses_in_other_binary_operators      = never_if_unnecessary

# TODO: They are too strict for general usage,
# add instead <WarningsAsErrors>CS8600;CS8602;CS8620</WarningsAsErrors> to .csproj if you are to use it with global `docker format`
# CS86xx: Nullalble reference types rules
# dotnet_diagnostic.CS8600.severity = error
# dotnet_diagnostic.CS8602.severity = error
# dotnet_diagnostic.CS8620.severity = error

# CS4014: The task must be awaited or ignored explicitly
dotnet_diagnostic.CS4014.severity = error

# CA2254: Do not directly await a Task
dotnet_diagnostic.CA2007.severity = error
dotnet_code_quality.CA2007.output_kind = DynamicallyLinkedLibrary

# Naming

# Private readonly fields start with 
dotnet_naming_symbols.private_readonly_field.applicable_kinds           = field
dotnet_naming_symbols.private_readonly_field.applicable_accessibilities = private
dotnet_naming_symbols.private_readonly_field.required_modifiers         = readonly

# Defining the `start_with_` naming style
dotnet_naming_style.starts_with_.capitalization   = camel_case
dotnet_naming_style.starts_with_.required_prefix  = _

dotnet_naming_rule.private_readonly_field_must_starts_with_.symbols   = private_readonly_field
dotnet_naming_rule.private_readonly_field_must_starts_with_.style = starts_with_
dotnet_naming_rule.private_readonly_field_must_starts_with_.severity = error

# Private static readonly fields Capitalized
dotnet_naming_symbols.private_static_readonly.applicable_kinds           = field, property
dotnet_naming_symbols.private_static_readonly.applicable_accessibilities = private, public, protected
dotnet_naming_symbols.private_static_readonly.required_modifiers         = static, readonly

# Defining the `pascal_case` naming style
dotnet_naming_style.pascal_case.capitalization   = pascal_case

dotnet_naming_rule.private_static_readonly_pacal_case.symbols   = private_static_readonly
dotnet_naming_rule.private_static_readonly_pacal_case.style = pascal_case
dotnet_naming_rule.private_static_readonly_pacal_case.severity = error